web项目启动顺序
1. 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> 和 <context-param></context-param>
2.紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.
3.容器将<context-param></context-param>转化为键值对,并交给ServletContext.
4.容器创建<listener></listener>中的类实例,即创建监听.
5.在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();
context-param的值 = ServletContext.getInitParameter("context-param的键");
6.得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早.

上下文参数：声明应用范围内的初始化参数
<context-param>
	<param-name>参数名</para-name>
	<param-value>参数值</param-value>
	<description>参数描述</description>
</context-param>

监听器配置
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

过滤器配置：将一个名字与一个实现javaxs.servlet.Filter接口的类相关联
<!-- 编码过滤器，以UTF8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

<!-- 接受非get post 传参 -->
	<filter>
        <filter-name>HttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>HttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

Servlet配置
<servlet>
    <servlet-name>servlet名称</servlet-name>
    <servlet-class>servlet类全路径</servlet-class>
    <init-param>
        <param-name>参数名</param-name>
        <param-value>参数值</param-value>
    </init-param>
 　 <load-on-startup>指定当Web应用启动时，装载Servlet的次序</load-on-startup>
</servlet>
<servlet-mapping>
   <servlet-name>servlet名称</servlet-name>
   <url-pattern>映射路径</url-pattern>
</servlet-mapping>

会话超时配置（单位为分钟）也可以在程序中配置
<session-config>
    <session-timeout>120</session-timeout>
</session-config>

指定欢迎文件页配置
<welcome-file-list>
	<welcome-file>index.html</welcome-file>
</welcome-file-list>

配置错误页面
(1).通过错误码来配置error-page
<error-page>
    <error-code>404</error-code>
    <location>/NotFound.jsp</location>
</error-page>
(2).通过异常的类型配置error-page
<error-page>
    <exception-type>java.lang.NullException</exception-type>
    <location>/error.jsp</location>
</error-page>